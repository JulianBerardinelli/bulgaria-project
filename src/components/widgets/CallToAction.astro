---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { CallToAction, Widget } from '~/types';
import Headline from '~/components/ui/Headline.astro';
import Button from '~/components/ui/Button.astro';

interface Props extends Widget {
  title?: string;
  subtitle?: string;
  tagline?: string;
  callToAction?: CallToAction;
  actions?: string | CallToAction[];
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  actions = await Astro.slots.render('actions'),

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <div
    class="relative overflow-hidden max-w-4xl mx-auto text-center px-8 py-12 sm:px-12 sm:py-16 rounded-3xl border border-primary/30 dark:border-accent/40 bg-white/90 dark:bg-slate-900/70 shadow-[0_20px_60px_-15px_rgba(0,69,45,0.45)] backdrop-blur-lg"
  >
    <div class="pointer-events-none absolute inset-0 bg-gradient-to-br from-primary/10 via-transparent to-secondary/10 dark:from-primary/10 dark:via-transparent dark:to-secondary/20"></div>
    <div class="pointer-events-none absolute -top-28 -right-24 h-64 w-64 rounded-full bg-secondary/25 blur-3xl dark:bg-secondary/40"></div>
    <div class="pointer-events-none absolute -bottom-24 -left-32 h-72 w-72 rounded-full bg-primary/25 blur-3xl dark:bg-accent/40"></div>

    <div class="relative">
      <Headline
        title={title}
        subtitle={subtitle}
        tagline={tagline}
        classes={{
          container: 'mb-0',
          title:
            'text-4xl md:text-5xl font-bold tracking-tight text-balance mb-6 font-heading text-slate-900 dark:text-white',
          subtitle: 'text-lg md:text-xl text-muted dark:text-slate-200 max-w-2xl mx-auto',
          tagline: 'text-sm font-semibold uppercase tracking-[0.3em] text-secondary/80',
        }}
      />
      {
        actions && (
          <div class="max-w-2xl mx-auto flex flex-col sm:flex-row sm:flex-wrap items-center justify-center gap-4 mt-8">
            {Array.isArray(actions) ? (
              actions.map((action) => (
                <div class="flex w-full sm:w-auto">
                  <Button {...(action || {})} class="w-full sm:w-auto sm:px-8 sm:py-3 font-semibold shadow-md shadow-primary/20 dark:shadow-secondary/30 hover:-translate-y-0.5 transition-transform" />
                </div>
              ))
            ) : (
              <Fragment set:html={actions} />
            )}
          </div>
        )
      }
    </div>
  </div>
</WidgetWrapper>
